# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_analytics_msgs/ObjectInBox3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg

class ObjectInBox3D(genpy.Message):
  _md5sum = "507469f9787211034d588b333ec709ee"
  _type = "object_analytics_msgs/ObjectInBox3D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This message can represent a 3D detection object with 2D region of interest and 3D information (min & max)
sensor_msgs/RegionOfInterest roi      # region of interest
geometry_msgs/Point32 min             # min and max locate the diagonal of a bounding-box of the detected object whose
geometry_msgs/Point32 max             # x, y and z axis parellel to the axises correspondingly in camera coordinates

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['roi','min','max']
  _slot_types = ['sensor_msgs/RegionOfInterest','geometry_msgs/Point32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       roi,min,max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectInBox3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.min is None:
        self.min = geometry_msgs.msg.Point32()
      if self.max is None:
        self.max = geometry_msgs.msg.Point32()
    else:
      self.roi = sensor_msgs.msg.RegionOfInterest()
      self.min = geometry_msgs.msg.Point32()
      self.max = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4IB6f().pack(_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.min.x, _x.min.y, _x.min.z, _x.max.x, _x.max.y, _x.max.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.min is None:
        self.min = geometry_msgs.msg.Point32()
      if self.max is None:
        self.max = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.min.x, _x.min.y, _x.min.z, _x.max.x, _x.max.y, _x.max.z,) = _get_struct_4IB6f().unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4IB6f().pack(_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.min.x, _x.min.y, _x.min.z, _x.max.x, _x.max.y, _x.max.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.min is None:
        self.min = geometry_msgs.msg.Point32()
      if self.max is None:
        self.max = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.min.x, _x.min.y, _x.min.z, _x.max.x, _x.max.y, _x.max.z,) = _get_struct_4IB6f().unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4IB6f = None
def _get_struct_4IB6f():
    global _struct_4IB6f
    if _struct_4IB6f is None:
        _struct_4IB6f = struct.Struct("<4IB6f")
    return _struct_4IB6f

// Generated by gencpp from file ca_policy_msgs/CaPolicy.msg
// DO NOT EDIT!


#ifndef CA_POLICY_MSGS_MESSAGE_CAPOLICY_H
#define CA_POLICY_MSGS_MESSAGE_CAPOLICY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ca_policy_msgs
{
template <class ContainerAllocator>
struct CaPolicy_
{
  typedef CaPolicy_<ContainerAllocator> Type;

  CaPolicy_()
    : header()
    , id(0)
    , name()
    , robot_id(0)  {
    }
  CaPolicy_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , name(_alloc)
    , robot_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _robot_id_type;
  _robot_id_type robot_id;



  enum {
    CAPOLICY_NORMAL = 0u,
    CAPOLICY_PEOPLE = 1u,
    CAPOLICY_ROBOT = 2u,
  };


  typedef boost::shared_ptr< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> const> ConstPtr;

}; // struct CaPolicy_

typedef ::ca_policy_msgs::CaPolicy_<std::allocator<void> > CaPolicy;

typedef boost::shared_ptr< ::ca_policy_msgs::CaPolicy > CaPolicyPtr;
typedef boost::shared_ptr< ::ca_policy_msgs::CaPolicy const> CaPolicyConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ca_policy_msgs::CaPolicy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ca_policy_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ca_policy_msgs': ['/home/awais/catkin_ws/src/ros_moving_object/sample/ca_policy_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2cf14769c8c2d2c6a1c44b1286ddff28";
  }

  static const char* value(const ::ca_policy_msgs::CaPolicy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2cf14769c8c2d2c6ULL;
  static const uint64_t static_value2 = 0xa1c44b1286ddff28ULL;
};

template<class ContainerAllocator>
struct DataType< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca_policy_msgs/CaPolicy";
  }

  static const char* value(const ::ca_policy_msgs::CaPolicy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017 Intel Corporation\n\
#\n\
# Licensed under the Apache License, Version 2.0 (the \"License\");\n\
# you may not use this file except in compliance with the License.\n\
# You may obtain a copy of the License at\n\
#\n\
#      http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS,\n\
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
# See the License for the specific language governing permissions and\n\
# limitations under the License.\n\
\n\
Header header\n\
uint8 CAPOLICY_NORMAL=0\n\
uint8 CAPOLICY_PEOPLE=1\n\
uint8 CAPOLICY_ROBOT=2\n\
\n\
uint8 id\n\
string name\n\
uint32 robot_id  # identifying the robot publishing the topic\n\
                 # in case to multiple robots are sharing data.\n\
                 # robot_id==0 means the self robot.\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ca_policy_msgs::CaPolicy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.robot_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaPolicy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ca_policy_msgs::CaPolicy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ca_policy_msgs::CaPolicy_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "robot_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CA_POLICY_MSGS_MESSAGE_CAPOLICY_H
